@page "/EditTickets/Id={Id:int}"
@using System.Linq.Expressions

@using Library.Models
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Ticket</PageTitle>

<PageTitle>Crear Nuevo Ticket</PageTitle>
<EditForm Model="ticket" OnValidSubmit="Crear">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header">
				<h3><strong>Crear Nuevo Ticket</strong></h3>
			</div>
			@*Cuerpo*@
			<div class="card-body">
				<div class="row mb-3">
					<div class="col-4">
						@*Ticket ID*@
						<label class="form-label" for="ticketId"><strong>TicketId:</strong></label>
						<InputNumber id="ticketId" class="form-control" @bind-Value="ticket.TicketsId"></InputNumber>
					</div>
					<div class="col-4">
						@*Fecha*@
						<label class="form-label" for="fecha"><strong>Fecha:</strong></label>
						<InputDate id="fecha" class="form-control" @bind-Value="ticket.Fecha"></InputDate>
						<ValidationMessage For="@(() => ticket.Fecha)"></ValidationMessage>
					</div>
					<div class="col-4">
						@*Asunto*@
						<label class="form-label" for="asunto"><strong>Asunto:</strong></label>
						<InputText id="asunto" class="form-control" @bind-Value="ticket.Asunto" placeholder="Ingrese un asunto"></InputText>
						<ValidationMessage For="@(() => ticket.Asunto)"></ValidationMessage>
					</div>
				</div>

				<div class="row mb-3">
					<div class="col-4">
						@*Solicitado Por*@
						<label class="form-label" for="solicitado"><strong>SolicitadoPor:</strong></label>
						<InputText id="solicitado" class="form-control" @bind-Value="ticket.SolicitadoPor" placeholder="Ingrese el nombre de quien solicita el ticket"></InputText>
						<ValidationMessage For="@(() => ticket.SolicitadoPor)"></ValidationMessage>
					</div>
					<div class="col-4">
						@*Cliente*@
						<label class="form-label" for="clienteid"><strong>ClienteId:</strong></label>
						<InputSelect id="cliente" class="form-select" @bind-Value="ticket.ClientesId">
							<option>Elija una opci&oacute;n</option>
							@foreach (var cliente in clientes)
							{
								<option value="@cliente.ClientesID">@cliente.NombresClientes</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => ticket.ClientesId)"></ValidationMessage>
					</div>
					<div class="col-4">
						@*Sistema*@
						<label class="form-label" for="sistemaid"><strong>SistemaId:</strong></label>
						<InputSelect id="sistemaid" class="form-select" @bind-Value="ticket.SistemasId">
							<option>Elija una opci&oacute;n</option>
							@foreach (var sistema in sistemas)
							{
								<option value="@sistema.SistemasId">@sistema.SistemasNombres</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => ticket.SistemasId)"></ValidationMessage>
					</div>
				</div>

				<div class="row mb-3">
					<div class="col-4">
						@*Prioridad*@
						<label class="form-label" for="prioridadid"><strong>PrioridadId:</strong></label>
						<InputSelect id="prioridadid" class="form-select" @bind-Value="ticket.PrioridadesId">
							<option>Elija una opci&oacute;n</option>
							@foreach (var prioridad in prioridades)
							{
								<option value="@prioridad.IdPrioridades">@prioridad.Descripcion</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => ticket.PrioridadesId)"></ValidationMessage>
					</div>
					<div class="col-8">
						@*Descripción*@
						<label class="form-label" for="descripcion"><strong>Descripci&oacute;n:</strong></label>
						<InputTextArea id="descripcion" class="form-control" @bind-Value="ticket.Descripcion" placeholder="Ingrese una descripción"></InputTextArea>
						<ValidationMessage For="@(() => ticket.Descripcion)"></ValidationMessage>
					</div>
				</div>
			</div>

			@*Footer*@
			<div class="card-footer d-flex justify-content-center">
				<div class="btn-group">
					<a href="IndexTickets" class="btn btn-outline-primary"><i class="bi bi-arrow-left" /> Volver</a>
					<button class="btn btn-outline-success"><i class="bi bi-floppy-fill " /> Guardar</button>
				</div>
			</div>
		</div>
	</div>
</EditForm>
@*Mensaje*@
@mensaje

@code {
	[Parameter]
	public int Id { get; set; }
	public Tickets ticket { get; set; } = new Tickets();
	public List<Clientes> clientes = new List<Clientes>();
	public List<Sistemas> sistemas = new List<Sistemas>();
	public List<Prioridades> prioridades = new List<Prioridades>();
	public string mensaje { get; set; } = string.Empty;
	public string transmisor { get; set; } = string.Empty;
	public string mensaje1 { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		clientes = await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes");
		sistemas = await httpClient.GetFromJsonAsync<List<Sistemas>>("api/Sistemas");
		prioridades = await httpClient.GetFromJsonAsync<List<Prioridades>>("api/Prioridades");
		ticket = await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{Id}");


	}

	public async Task Crear()
	{
		if (!await ValidarTicket())
		{
			return;
		}
		else
		{
			var response = await httpClient.PutAsJsonAsync("api/Tickets", ticket);
			if (response.IsSuccessStatusCode)
			{
				mensaje = "Se guardo el ticket";
				StateHasChanged();
				navigationManager.NavigateTo("/IndexTickets");
			}
			else
			{
				mensaje = "No se guardo el ticket";
			}
		}

	}
	public async Task<bool> ValidarTicket()
	{
		var tickets = await httpClient.GetFromJsonAsync<List<Tickets>>("api/Tickets");
		var asunto = tickets.Where(t => t.Asunto.Equals(ticket.Asunto));
		var solicitadoPor = tickets.Where(t => t.SolicitadoPor.Equals(ticket.SolicitadoPor));
		var descripcion = tickets.Where(t => t.Descripcion.Equals(ticket.Descripcion));

		if (asunto.Any())
		{
			mensaje = "Ya existe un ticket con este asunto";
			return false;
		}
		if (solicitadoPor.Any())
		{
			mensaje = "Ya existe un ticket con este solicitado";
			return false;
		}
		if (descripcion.Any())
		{
			mensaje = "Ya existe un ticket con esta descripción";
			return false;
		}

		return true;
	}
}