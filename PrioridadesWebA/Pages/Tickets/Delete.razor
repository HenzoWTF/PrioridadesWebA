@page "/DeleteCliente/Id={Id:int}"
@using Library.Models
@inject HttpClient httpClient
@inject NavigationManager navigation

<PageTitle>Eliminar Ticket</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Eliminar Ticket</strong></h3>
		</div>
		@*Body*@
		<div class="card-body">
			@*Datos*@
			<ul>
				<li><p><strong>TicketId:</strong> @ticket.TicketsId</p></li>
				<li><p><strong>Fecha:</strong> @ticket.Fecha.ToShortDateString()</p></li>
				<li><p><strong>Asunto:</strong> @ticket.Asunto</p></li>
				<li><p><strong>SolicitadoPor:</strong> @ticket.SolicitadoPor</p></li>
				<li><p><strong>ClienteId:</strong> @ticket.ClientesId</p></li>
				<li><p><strong>SistemaId:</strong> @ticket.SistemasId</p></li>
				<li><p><strong>PrioridadId:</strong> @ticket.PrioridadesId</p></li>
				<li><p><strong>Descripci&oacute;n:</strong> @ticket.Descripcion</p></li>

			</ul>
		</div>

		@*TicketsDetalles*@
		@*Header*@
		<div class="card card-header">
			<h3><strong>Detalles</strong></h3>
		</div>

		@*Detalles*@
		<div class="card-body">
			<section>
				@if (ticket.TicketsDetalle.Count > 0)
				{
					@*Table Detalles*@
					<table class="table table-bordered miTabla">
						<thead>
							<tr>
								<th>Emisor</th>
								<th>Mensaje</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var detalle in ticket.TicketsDetalle)
							{
								<tr>
									<td>@detalle.Emisor</td>
									<td>@detalle.Mensaje</td>
								</tr>
							}
						</tbody>
					</table>
					<p><strong>Total de Detalles: </strong>@ticket.TicketsDetalle.Count</p>
				}
			</section>
		</div>

		<div class="card-footer d-flex justify-content-center">
			<div class="btn-group">
				<button class="btn btn-outline-success"><i class="bi bi-floppy-fill " /> Guardar</button>
				<a href="IndexSistemas" class="btn btn-outline-primary"><i class="bi bi-arrow-left" /> Volver</a>
			</div>
		</div>
	</div>
</div>
@*Mensaje*@
@mensaje

@code {
	[Parameter]
	public int Id { get; set; }
	public Tickets ticket { get; set; } = new Tickets();
	public string mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		ticket = await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{Id}");
	}

	public async Task Eliminar()
	{
		var response = await httpClient.DeleteAsync($"api/Tickets/{ticket.TicketsId}");

		if (response.IsSuccessStatusCode)
		{
			mensaje = "El ticket se eliminó con éxito";
			await Task.Delay(2000);
		}
		else
		{
			mensaje = "El ticket no se pudo eliminar con éxito";
		}
	}

}